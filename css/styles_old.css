@font-face {
  font-family: "Calistoga";
  src: url("https://fonts.gstatic.com/s/calistoga/v1/6NUU8F2OJg6MeR7l4e0fs8wB.woff2")
    format("woff2");
}

body {
  font-family: "Calistoga", Arial, sans-serif;
}

body {
  background-color: orange;
}
body {
  background-color: blue;
}
body {
  background-color: orange;
}

/*
Specificity
In the above example we have two selectors that have the same level of 
specificity. They're both targeting the <body>. But what if we want 
the <main> to be styled a different colour to the rest of the body? 
In this example, the <body> will be orange and the <main> will be blue 
as the main is more specific than its parent element, the body.
*/
main {
  background-color: blue;
}
/*
In the order of specificity:

    A tag selector is the least specific.
    Then a class as it can be applied to multiple elements.
    Then an ID as it can only be applied to one element. 


*/

h1 {
  font-size: 20px;
  color: green;
}
a {
  color: green;
  text-decoration: none;
  text-decoration: royalblue;
  text-decoration-line: underline;
}

.content {
  font-family: "Open Sans", Verdana, sans-serif;
}

.highlighted {
  border: 2px dashed red;
}
#account {
  font-family: "Open Sans", Verdana, sans-serif;
}

/* 
In CSS we try to follow what is called the DRY Principle (Don't Repeat Yourself). 
This is key to writing good CSS, and helps us to write CSS that is as succinct as possible. 
Therefore, instead of writing them twice, we can use a comma to combine the styles together:
 */
h1,
h2 {
  font-family: Avant Garde, sans-serif;
}
/* 
Let's say we wanted to style all <li> elements in the navigation to be in a row. 
We couldn't use li {display: inline-block;} because this would also affect the list 
items in the <main>. What we could do is use what is called a descendant combinator, 
like so: nav li {}
 */
nav li {
  display: inline-block;
}
/*
Let's also remove the padding to the <ul> that the browser automatically applies. We can do 
this all using the descendant combinator as we did above.
*/
nav ul {
  padding: 0px;
}
/*
and set the anchor tags in the navigation to be black with no underline
*/
nav a {
  color: #9d3400;
  text-decoration: none;
}

h2 + p {
  font-size: 36px;
}
/*
The CSS written below is applying the font, Verdana, to all paragraphs on the page, 
but if the browser doesn't have the first-choice of Verdana (maybe the user deleted 
the font file from their computer) the browser will display whatever the default 
sans-serif font is. You should always include a generic family name (serif, sans-serif, 
monospace, cursive).
*/
p {
  font-family: Verdana, sans-serif;
}

/*
In this case, we are asking the browser to load "Open Sans" (note the quotation marks 
because it's two words), but if you don't have "Open Sans" try Tahoma. If you don't 
have Tahoma you can try Verdana, and finally just load the generic sans-serif for 
the browser.
*/
p {
  font-family: "Open Sans", Tahoma, Verdana, sans-serif;
}

/*
Let's say we wanted the navigation links to change when a user hovers over it. 
We could use the following code (notice the colon between a and the keyword 
hover): nav a:hover {}
*/
nav a:hover {
  text-decoration: underline;
}
/* Any nav text over which the user's pointer is hovering */
nav a:hover {
  color: blue;
}

/* The first line of every <p> element. */
p::first-line {
  color: blue;
  text-transform: uppercase;
}
/*
Other pseudo-elements that are useful to know are ::before and ::after 
which let you style the section before or after a specific element. 
With CSS you can use the content property to add content to the HTML. 
In this example we are adding a calendar icon in front of the date.
*/
.date::before {
  content: "\1F4C5";
}

.active {
  background-color: seagreen;
  color: #fff;
}

footer::before,
footer::after {
  content: "/";
  color: #930000;
  font-size: 30px;
  font-weight: bold;
}

.button {
  background-color: #4caf50;
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  cursor: pointer;
}

h1 {
  font-family: Verdana, Geneva, sans-serif;
  font-size: 24px;
  font-style: normal;
  font-variant: normal;
  font-weight: 700;
  line-height: 26.4px;
}

/* By default, your browser uses 16px for a font-size, and so 1em = 16px. 
The code above sets the h2 to be 2em, which by default would be 32px. 
You can also have integers, so 0.5em would be 8px.
*/
h2 {
  font-size: 2em;
}
h3 {
  font-family: Verdana, Geneva, sans-serif;
  font-size: 14px;
  font-style: normal;
  font-variant: normal;
  font-weight: 700;
  line-height: 15.4px;
}
p {
  font-family: Verdana, Geneva, sans-serif;
  font-size: 14px;
  font-style: normal;
  font-variant: normal;
  font-weight: 400;
  line-height: 20px;
}
blockquote {
  font-family: Verdana, Geneva, sans-serif;
  font-size: 21px;
  font-style: normal;
  font-variant: normal;
  font-weight: 400;
  line-height: 30px;
}
pre {
  font-family: Verdana, Geneva, sans-serif;
  font-size: 13px;
  font-style: normal;
  font-variant: normal;
  font-weight: 400;
  line-height: 18.5667px;
}

/*To get around the issue of compounding, rem sizes were invented.
rem is calculated based on the <html> element and not the parent element. 
Using this above code would mean both the outer and nested span element 
would be set to be 24px.
*/
span {
  font-size: 1.5rem;
}
